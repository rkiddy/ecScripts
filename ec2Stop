#!/bin/bash

# Note that these scripts rely on having 'StrictHostKeyChecking accept-new' in the ~/.ssh/config file.
#
# For jq, a sort of sed for json data, see https://stedolan.github.io/jq/

if [ "$1" != "-dailyJail" ] && [ "$1" != "-leginfo" ] && [ "$1" != "-voter" ] && [ "$1" != "-jdi" ] && [ "$1" != "-all" ]; then
    echo ""
    echo "Please give me \"-dailyJail\", \"-leginfo\", \"-voter\", \"-jdi\", or \"-all\" as a parameter."
    echo ""
    exit
fi

aws ec2 describe-instances > /tmp/ec2_$$.json

for inst_num in {0..10}
do
    if [ `jq --raw-output '.Reservations['$inst_num'].Instances[0].Tags[0].Value' /tmp/ec2_$$.json` = "dailyJail" ]; then
        dailyJailIdx=$inst_num
    fi
    if [ `jq --raw-output '.Reservations['$inst_num'].Instances[0].Tags[0].Value' /tmp/ec2_$$.json` = "leginfo" ]; then
        leginfoIdx=$inst_num
    fi
    if [ `jq --raw-output '.Reservations['$inst_num'].Instances[0].Tags[0].Value' /tmp/ec2_$$.json` = "voter" ]; then
        voterIdx=$inst_num
    fi
    if [ `jq --raw-output '.Reservations['$inst_num'].Instances[0].Tags[0].Value' /tmp/ec2_$$.json` = "jdi" ]; then
        jdiIdx=$inst_num
    fi
done

djState=`jq --raw-output '.Reservations['$dailyJailIdx'].Instances[0].State.Name' /tmp/ec2_$$.json`
djId=`jq --raw-output '.Reservations['$dailyJailIdx'].Instances[0].InstanceId' /tmp/ec2_$$.json`
djIp=`jq --raw-output '.Reservations['$dailyJailIdx'].Instances[0].PublicIpAddress' /tmp/ec2_$$.json`

legState=`jq --raw-output '.Reservations['$leginfoIdx'].Instances[0].State.Name' /tmp/ec2_$$.json`
legId=`jq --raw-output '.Reservations['$leginfoIdx'].Instances[0].InstanceId' /tmp/ec2_$$.json`
legIp=`jq --raw-output '.Reservations['$leginfoIdx'].Instances[0].PublicIpAddress' /tmp/ec2_$$.json`

votState=`jq --raw-output '.Reservations['$voterIdx'].Instances[0].State.Name' /tmp/ec2_$$.json`
votId=`jq --raw-output '.Reservations['$voterIdx'].Instances[0].InstanceId' /tmp/ec2_$$.json`
votIp=`jq --raw-output '.Reservations['$voterIdx'].Instances[0].PublicIpAddress' /tmp/ec2_$$.json`

jdiState=`jq --raw-output '.Reservations['$jdiIdx'].Instances[0].State.Name' /tmp/ec2_$$.json`
jdiId=`jq --raw-output '.Reservations['$jdiIdx'].Instances[0].InstanceId' /tmp/ec2_$$.json`
jdiIp=`jq --raw-output '.Reservations['$jdiIdx'].Instances[0].PublicIpAddress' /tmp/ec2_$$.json`

if [ "$1" = "-dailyJail" ] || [ "$1" = "-all" ]; then

    echo ""
    echo "dailyJail id: $djId"
    echo ""

    if [ "$1" = "-dailyJail" ] && [ $djState != "running" ]; then

        echo "instance in unexpected state: $djState. Aborting."
        echo ""
        djState="broken"
    fi

    if [ "$djState" != "broken" ]; then

        aws ec2 stop-instances --instance-ids $djId

        while :
        do

            launchStatus=`aws ec2 describe-instances --instance-ids $djId | jq --raw-output '.Reservations[0].Instances[0].State.Name'`

            echo "launchStatus: $launchStatus"
            echo ""

            if [ $launchStatus = "stopped" ]; then
                break;
            fi

            sleep 5
        done
    fi
fi

if [ "$1" = "-leginfo" ] || [ "$1" = "-all" ]; then

    echo ""
    echo "leginfo id: $legId"
    echo ""

    if [ "$1" = "-leginfo" ] && [ $legState != "running" ]; then

        echo "instance in unexpected state: $legState. Aborting."
        echo ""
        legState="broken"
    fi

    if [ "$legState" != "broken" ]; then

        aws ec2 stop-instances --instance-ids $legId

        while :
        do

            launchStatus=`aws ec2 describe-instances --instance-ids $legId | jq --raw-output '.Reservations[0].Instances[0].State.Name'`

            echo "launchStatus: $launchStatus"
            echo ""

            if [ $launchStatus = "stopped" ]; then
                break;
            fi

            sleep 5
        done
    fi
fi

if [ "$1" = "-voter" ] || [ "$1" = "-all" ]; then

    echo ""
    echo "voter id: $votId"
    echo ""

    if [ "$1" = "-voter" ] && [ $votState != "running" ]; then

        echo "instance in unexpected state: $votState. Aborting."
        echo ""
        votState="broken"
    fi

    if [ "$votState" != "broken" ]; then

        aws ec2 stop-instances --instance-ids $votId

        while :
        do

            launchStatus=`aws ec2 describe-instances --instance-ids $votId | jq --raw-output '.Reservations[0].Instances[0].State.Name'`

            echo "launchStatus: $launchStatus"
            echo ""

            if [ $launchStatus = "stopped" ]; then
                break;
            fi

            sleep 5
        done
    fi
fi

if [ "$1" = "-jdi" ] || [ "$1" = "-all" ]; then

    echo ""
    echo "jdi id: $jdiId"
    echo ""

    if [ "$1" = "-jdi" ] && [ $jdiState != "running" ]; then

        echo "instance in unexpected state: $jdiState. Aborting."
        echo ""
        jdiState="broken"
    fi

    if [ "$jdiState" != "broken" ]; then

        aws ec2 stop-instances --instance-ids $jdiId

        while :
        do

            launchStatus=`aws ec2 describe-instances --instance-ids $jdiId | jq --raw-output '.Reservations[0].Instances[0].State.Name'`

            echo "launchStatus: $launchStatus"
            echo ""

            if [ $launchStatus = "stopped" ]; then
                break;
            fi

            sleep 5
        done
    fi
fi

exit 0
